log_posterior = log_density,
data = params,
lb = lb, ub = ub,
silent = TRUE,
method = 'warp3')
# out = bridge_approx(u_samp, log_density, params, lb, ub, method = 'warp3')
# if (is.na(out)) {
#     print('bridge failed to converge -- retrying...')
#     next
# }
bridge[i] = bridge_result$logml
hme[i] = hme_approx(u_df, params, J, D, N)
avg_hyb = mean(hyb[hyb!=0])
avg_bridge = mean(bridge[bridge!=0])
avg_hme = mean(hme[hme!=0])
print(paste("iter ", i, ': ',
"hybrid = ", round(avg_hyb, 3),
'; ', "ae = ", round(mean((LIL - hyb[hyb!=0])), 4),
' // ',
"bridge = ", round(avg_bridge, 3), '; ',
"ae = ", round(mean((LIL - bridge[bridge!=0])), 4),
# ' // ',
# "hme = ", round(avg_hme, 3), '; ',
# "ae = ", round(mean((LIL - hme[hme!=0])), 4),
sep = ''))
i = i + 1
}
while (i <= B) {
postIW = sampleHIW(J, D_u, D_0, testG, b, N, V, S, edgeInd)
post_samps = postIW$post_samps                 # (J x D_u)
u_df = preprocess(post_samps, D_u, params)     # J x (D_u + 1)
hybrid = hybrid_ml(D_u, u_df, J, param_list)
if (any(is.na(hybrid))) {print(paste("error in iteration", i)); next;}
hyb[i] = hybrid$zhat
u_samp = as.matrix(post_samps)
colnames(u_samp) = names(u_df)[1:D_u]
lb = rep(-Inf, D_u)
ub = rep(Inf, D_u)
names(lb) <- names(ub) <- colnames(u_samp)
bridge_result = bridgesampling::bridge_sampler(samples = u_samp,
log_posterior = log_density,
data = params,
lb = lb, ub = ub,
silent = TRUE,
method = 'warp3')
# out = bridge_approx(u_samp, log_density, params, lb, ub, method = 'warp3')
# if (is.na(out)) {
#     print('bridge failed to converge -- retrying...')
#     next
# }
bridge[i] = bridge_result$logml
hme[i] = hme_approx(u_df, params, J, D, N)
avg_hyb = mean(hyb[hyb!=0])
avg_bridge = mean(bridge[bridge!=0])
avg_hme = mean(hme[hme!=0])
print(paste("iter ", i, ': ',
"hybrid = ", round(avg_hyb, 3),
'; ', "ae = ", round(mean((LIL - hyb[hyb!=0])), 4),
' // ',
"bridge = ", round(avg_bridge, 3), '; ',
"ae = ", round(mean((LIL - bridge[bridge!=0])), 4),
# ' // ',
# "hme = ", round(avg_hme, 3), '; ',
# "ae = ", round(mean((LIL - hme[hme!=0])), 4),
sep = ''))
i = i + 1
}
while (i <= B) {
postIW = sampleHIW(J, D_u, D_0, testG, b, N, V, S, edgeInd)
post_samps = postIW$post_samps                 # (J x D_u)
u_df = preprocess(post_samps, D_u, params)     # J x (D_u + 1)
hybrid = hybrid_ml(D_u, u_df, J, param_list)
if (any(is.na(hybrid))) {print(paste("error in iteration", i)); next;}
hyb[i] = hybrid$zhat
u_samp = as.matrix(post_samps)
colnames(u_samp) = names(u_df)[1:D_u]
lb = rep(-Inf, D_u)
ub = rep(Inf, D_u)
names(lb) <- names(ub) <- colnames(u_samp)
bridge_result = bridgesampling::bridge_sampler(samples = u_samp,
log_posterior = log_density,
data = params,
lb = lb, ub = ub,
silent = TRUE,
method = 'warp3')
# out = bridge_approx(u_samp, log_density, params, lb, ub, method = 'warp3')
# if (is.na(out)) {
#     print('bridge failed to converge -- retrying...')
#     next
# }
bridge[i] = bridge_result$logml
hme[i] = hme_approx(u_df, params, J, D, N)
avg_hyb = mean(hyb[hyb!=0])
avg_bridge = mean(bridge[bridge!=0])
avg_hme = mean(hme[hme!=0])
print(paste("iter ", i, ': ',
"hybrid = ", round(avg_hyb, 3),
'; ', "ae = ", round(mean((LIL - hyb[hyb!=0])), 4),
' // ',
"bridge = ", round(avg_bridge, 3), '; ',
"ae = ", round(mean((LIL - bridge[bridge!=0])), 4),
# ' // ',
# "hme = ", round(avg_hme, 3), '; ',
# "ae = ", round(mean((LIL - hme[hme!=0])), 4),
sep = ''))
i = i + 1
}
while (i <= B) {
postIW = sampleHIW(J, D_u, D_0, testG, b, N, V, S, edgeInd)
post_samps = postIW$post_samps                 # (J x D_u)
u_df = preprocess(post_samps, D_u, params)     # J x (D_u + 1)
hybrid = hybrid_ml(D_u, u_df, J, param_list)
if (any(is.na(hybrid))) {print(paste("error in iteration", i)); next;}
hyb[i] = hybrid$zhat
u_samp = as.matrix(post_samps)
colnames(u_samp) = names(u_df)[1:D_u]
lb = rep(-Inf, D_u)
ub = rep(Inf, D_u)
names(lb) <- names(ub) <- colnames(u_samp)
bridge_result = bridgesampling::bridge_sampler(samples = u_samp,
log_posterior = log_density,
data = params,
lb = lb, ub = ub,
silent = TRUE,
method = 'warp3')
# out = bridge_approx(u_samp, log_density, params, lb, ub, method = 'warp3')
# if (is.na(out)) {
#     print('bridge failed to converge -- retrying...')
#     next
# }
bridge[i] = bridge_result$logml
hme[i] = hme_approx(u_df, params, J, D, N)
avg_hyb = mean(hyb[hyb!=0])
avg_bridge = mean(bridge[bridge!=0])
avg_hme = mean(hme[hme!=0])
print(paste("iter ", i, ': ',
"hybrid = ", round(avg_hyb, 3),
'; ', "ae = ", round(mean((LIL - hyb[hyb!=0])), 4),
' // ',
"bridge = ", round(avg_bridge, 3), '; ',
"ae = ", round(mean((LIL - bridge[bridge!=0])), 4),
# ' // ',
# "hme = ", round(avg_hme, 3), '; ',
# "ae = ", round(mean((LIL - hme[hme!=0])), 4),
sep = ''))
i = i + 1
}
while (i <= B) {
postIW = sampleHIW(J, D_u, D_0, testG, b, N, V, S, edgeInd)
post_samps = postIW$post_samps                 # (J x D_u)
u_df = preprocess(post_samps, D_u, params)     # J x (D_u + 1)
hybrid = hybrid_ml(D_u, u_df, J, param_list)
if (any(is.na(hybrid))) {print(paste("error in iteration", i)); next;}
hyb[i] = hybrid$zhat
u_samp = as.matrix(post_samps)
colnames(u_samp) = names(u_df)[1:D_u]
lb = rep(-Inf, D_u)
ub = rep(Inf, D_u)
names(lb) <- names(ub) <- colnames(u_samp)
bridge_result = bridgesampling::bridge_sampler(samples = u_samp,
log_posterior = log_density,
data = params,
lb = lb, ub = ub,
silent = TRUE,
method = 'warp3')
# out = bridge_approx(u_samp, log_density, params, lb, ub, method = 'warp3')
# if (is.na(out)) {
#     print('bridge failed to converge -- retrying...')
#     next
# }
bridge[i] = bridge_result$logml
hme[i] = hme_approx(u_df, params, J, D, N)
avg_hyb = mean(hyb[hyb!=0])
avg_bridge = mean(bridge[bridge!=0])
avg_hme = mean(hme[hme!=0])
print(paste("iter ", i, ': ',
"hybrid = ", round(avg_hyb, 3),
'; ', "ae = ", round(mean((LIL - hyb[hyb!=0])), 4),
' // ',
"bridge = ", round(avg_bridge, 3), '; ',
"ae = ", round(mean((LIL - bridge[bridge!=0])), 4),
# ' // ',
# "hme = ", round(avg_hme, 3), '; ',
# "ae = ", round(mean((LIL - hme[hme!=0])), 4),
sep = ''))
i = i + 1
}
approx = data.frame(LIL, hyb = hyb[1:B], bridge = bridge[1:B],
hme = hme[1:B])
(error = data.frame(approx = colMeans(approx), approx_sd = apply(approx, 2, sd),
mae = colMeans(abs(LIL - approx)),
ae = colMeans(LIL - approx),
rmse = sqrt(colMeans((LIL - approx)^2))) %>% round(3))
delta_df = (approx - LIL) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw()
delta_df = (LIL - approx) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
approx %>% head
delta_df = (LIL - approx) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw()
getwd()
approx = data.frame(LIL, hyb = hyb[1:B], bridge = bridge[1:B],
hme = hme[1:B])
names(approx) = c("LIL", "HybE", "WBSE", "HME")
(error = data.frame(approx = colMeans(approx), approx_sd = apply(approx, 2, sd),
mae = colMeans(abs(LIL - approx)),
ae = colMeans(LIL - approx),
rmse = sqrt(colMeans((LIL - approx)^2))) %>% round(3))
delta_df = (LIL - approx) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw()
fig_loc = 'C:/Users/ericc/mlike_approx/final_sims/'
saveRDS(list(J = J, D = D, D_u = D_u, N = N, approx = approx, error = error),
file = paste(fig_loc, 'hiw_d5_j30.RData', sep = ''))
hiw_d5 = readRDS(paste(fig_loc, 'hiw_d5_j30.RData', sep = ''))
hiw_d5$approx %>% head
fig_loc = 'C:/Users/ericc/mlike_approx/final_sims/'
saveRDS(list(J = J, D = D, D_u = D_u, N = N, approx = approx, error = error),
file = paste(fig_loc, 'hiw_d5_j25.RData', sep = ''))
hiw_5e3 = readRDS(paste(fig_loc, 'hiw_d5_j5e3.RData', sep = ''))
approx_5e3 = hiw_5e3$approx_df
hiw_5e3$error
approx_5e3 %>% head
names(approx_5e3) = c("LIL", "HybE", "BSE", "HME")
delta_df = (LIL - approx_5e3) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw()
citation("TruncatedNormal")
setwd("C:/Users/ericc/Dropbox/eric chuu research/aistats/rdata_files")
mvnig = readRDS('mvnig_d20_j5e3.RData')
colMeans((mvnig$approx_df - LIL))
approx_df = mvnig$approx_df
names(approx_df) = c("LIL", "HybE", "BSE", "CAME", "HME")
delta_df = (approx_df - LIL) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw()
LIL
mvnig$approx_df$LIL
LIL = mvnig$approx_df$LIL[1]
approx_df = mvnig$approx_df
names(approx_df) = c("LIL", "HybE", "BSE", "CAME", "HME")
delta_df = (approx_df - LIL) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw()
(error = data.frame(approx = colMeans(approx), approx_sd = apply(approx, 2, sd),
ae = colMeans((LIL - approx)),
rmse = sqrt(colMeans((LIL - approx)^2))) %>% round(3))
(error = data.frame(approx = colMeans(approx_df), approx_sd = apply(approx, 2, sd),
ae = colMeans((LIL - approx)),
rmse = sqrt(colMeans((LIL - approx)^2))) %>% round(3))
approx = approx_df
(error = data.frame(approx = colMeans(approx), approx_sd = apply(approx, 2, sd),
ae = colMeans((LIL - approx)),
rmse = sqrt(colMeans((LIL - approx)^2))) %>% round(3))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text =element_text(size=12))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=12),
axis.title = element_text(size=20,face="bold"))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=20),
axis.title = element_text(size=20,face="bold"))
delta_df = (LIL - approx_df) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=20),
axis.title = element_text(size=20,face="bold"))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold"))
#### read in NSE stuff
# nse stuff
data_file_loc = 'C:/Users/ericc/Dropbox/eric chuu research/aistats/rdata_files/'
nse = read.csv(paste(data_file_loc, 'nse_trunc_d20.csv', sep = ''),
header = F)[,1]
nse %>% head
approx = data.frame(LIL, hyb = hyb[hyb!=0], bridge = bridge[bridge!=0],
came = came[came!=0], hme = hme[hme!=0], nse = nse)
error = data.frame(approx = colMeans(approx),
approx_sd = apply(approx, 2, sd),
mae = colMeans(abs(LIL - approx)),
ae = colMeans((LIL - approx)),
rmse = sqrt(colMeans((LIL - approx)^2))) %>% round(3)
names(approx) = c("LIL", "HybE", "BSE", "CAME", "HME", "NSE")
approx %>% head
delta_df = (approx - LIL) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw()
delta_df = (LIL - approx) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw()
fig_loc = 'C:/Users/ericc/mlike_approx/final_sims/'
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold"))
fig_loc = 'C:/Users/ericc/mlike_approx/final_sims/'
trunc = readRDS(paste(fig_loc, 'trunc_d20_j1e5.RData', sep = ''))
trunc$approx_df %>% head
approx =trunc$approx_df %>% head
fig_loc = 'C:/Users/ericc/mlike_approx/final_sims/'
trunc = readRDS(paste(fig_loc, 'trunc_d20_j1e5.RData', sep = ''))
approx = trunc$approx_df %>% head
approx %>% head
LIL = approx$LIL[1]
approx %>% head
delta_df = (LIL - approx) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold"))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold")) +
scale_y_continuous(c(-50, 5, 5))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold")) +
scale_y_continuous(breaks = c(-50, 5, 5))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold")) +
scale_y_continuous(labs = c(-50, 5, 5))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold")) +
scale_y_continuous(breaks = c(-50, 5, 5))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold")) +
scale_y_continuous(breaks = seq(-50, 5, 5))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold")) +
scale_y_continuous(breaks = seq(-35, 0, 5))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold")) +
scale_y_continuous(breaks = seq(-30, 0, 10))
setwd("C:/Users/ericc/Dropbox/eric chuu research/aistats/rdata_files")
mvnig = readRDS('mvnig_d20_j5e3.RData')
colMeans((mvnig$approx_df - LIL))
LIL = mvnig$approx_df$LIL[1]
approx_df = mvnig$approx_df
names(approx_df) = c("LIL", "HybE", "BSE", "CAME", "HME")
delta_df = (LIL - approx_df) %>% dplyr::select(-c('LIL')) %>% melt()
delta_df %>% head
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold"))
approx = approx_df
(error = data.frame(approx = colMeans(approx), approx_sd = apply(approx, 2, sd),
ae = colMeans((LIL - approx)),
rmse = sqrt(colMeans((LIL - approx)^2))) %>% round(3))
### figure dimensions for saving: (954 x 488)
ggplot(delta_df, aes(x = variable, y = value)) + geom_boxplot() +
coord_flip() +
labs(y = expression(paste(Delta, ' ', ln, ' ', p(y))), x = '') +
theme_bw() +
theme(axis.text  = element_text(size=25),
axis.title = element_text(size=25,face="bold")) +
scale_y_continuous(breaks = seq(-50, 0, 10))
library(TruncatedNormal)
library(tmg)
library(mvtnorm)
library(Rcpp)
setwd("C:/Users/ericc/mlike_approx/algo")
source("setup.R")
source("C:/Users/ericc/mlike_approx/truncate/regTN_helper.R")
sourceCpp("C:/Users/ericc/mlike_approx/speedup/trunc_psi.cpp")
set.seed(123)
D = 20
N = 100
I_D = diag(1, D)
n_samps = 10
J       = 50
B       = 100 # number of replications
source("C:/Users/ericc/mlike_approx/paper_simulations/table2/mvn_estimators.R")
#### generate data -------------------------------------------------------------
# prior mean
mu_0 = rep(0, D)
tau     = 1 / 4          # precision: inverse of variance
sigmasq = 4              # true variance (1 x 1)
# true value of beta
set.seed(1)
beta = sample(0:10, D, replace = T)
beta = runif(D)
beta = c(runif(D-1, 0, 1), 0)
# generate the regression data -------------------------------------------------
X   = matrix(rnorm(N * D), N, D)                # (N x D) design matrix
eps = rnorm(N, mean = 0, sd = sqrt(sigmasq))    # (N x 1) errors vector
y   = X %*% beta + eps                          # (N x 1) response vector
# write.csv(X,   "C:/Users/ericc/X.csv", row.names = FALSE)
# write.csv(y,   "C:/Users/ericc/y.csv", row.names = FALSE)
# write.csv(eps, "C:/Users/ericc/eps.csv", row.names = FALSE)
# write.csv(beta, "C:/Users/ericc/beta.csv", row.names = FALSE)
# compute posterior parameters -------------------------------------------------
Q_beta     =  1 / sigmasq * (t(X) %*% X + tau * diag(1, D))
Q_beta_inv =  solve(Q_beta)
b          =  1 / sigmasq * t(X) %*% y
mu_beta    =  Q_beta_inv %*% b
# create prior, post objects to be passed into the hml algorithm
prior = list(y = y, X = X, sigmasq = sigmasq, tau = tau, N = N, D = D,
Q_beta = Q_beta, b = b)
post = list(Q_beta = Q_beta, Q_beta_inv = Q_beta_inv, mu_beta = mu_beta, b = b)
#### compute true log marginal likelihood --------------------------------------
lil_0 = -0.5 * N * log(2 * pi) - 0.5 * (N + D) * log(sigmasq) +
0.5 * D * log(tau) - 0.5 * log_det(Q_beta) -
1 / (2 * sigmasq) * sum(y^2) + 0.5 * sum(b * mu_beta)
(LIL  = lil_0 + D * log(2) +
log(TruncatedNormal::pmvnorm(mu_beta, Q_beta_inv,
lb = rep(0, D), ub = rep(Inf, D))[1]))
